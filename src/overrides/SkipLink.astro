---
import { Icon } from '@astrojs/starlight/components'
import Default from '@astrojs/starlight/components/SkipLink.astro'
import starlightThemes from 'virtual:starlight-themes'

import { getThemePathname, Themes, ThemesIds } from '../libs/theme'
---

<Default><slot /></Default>
<div class="starlight-themes-toolbar not-content">
  <label>
    <span aria-hidden="true" class="label-text">Theme:</span>
    <span class="sr-only">Change Theme:</span>
    <starlight-themes-select>
      <select autocomplete="off">
        <option value={getThemePathname(Astro.url)} selected={!starlightThemes.currentId}>Default</option>
        {
          ThemesIds.map((id) => (
            <option value={getThemePathname(Astro.url, id)} selected={id === starlightThemes.currentId}>
              {Themes[id].name}
            </option>
          ))
        }
      </select>
      <Icon name="down-caret" class="caret" />
    </starlight-themes-select>
  </label>
  {
    starlightThemes.currentId && (
      <div>
        <a href={Themes[starlightThemes.currentId].link} class="documentation">
          Documentation
          <Icon name="right-arrow" size="1.5rem" />
        </a>
      </div>
    )
  }
</div>

<script>
  customElements.define(
    'starlight-themes-select',
    class StarlightThemesSelect extends HTMLElement {
      constructor() {
        super()
        const select = this.querySelector('select')
        if (!select) return

        select.addEventListener('change', (event) => {
          if (!(event.currentTarget instanceof HTMLSelectElement)) return

          globalThis.location.pathname = event.currentTarget.value
        })

        globalThis.addEventListener('pageshow', (event) => {
          if (!event.persisted) return

          // If the page was loaded from a cache, the themes select selected index might not be in sync with the
          // current page.
          const markupSelectedIndex = select.querySelector<HTMLOptionElement>('option[selected]')?.index
          if (markupSelectedIndex !== select.selectedIndex) {
            select.selectedIndex = markupSelectedIndex ?? 0
          }
        })
      }
    },
  )
</script>

<style>
  .starlight-themes-toolbar {
    --starlight-themes-accent: hsl(0 100% 100%);

    background-color: hsl(210 100% 40%);
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='20' height='20' viewBox='0 0 20 20'%3E%3Cg stroke='%23ffffff59' stroke-width='1' fill='none'%3E%3Cline x1='0' y1='0' x2='20' y2='0' stroke-dasharray='3,2'/%3E%3Cline x1='0' y1='0' x2='0' y2='20' stroke-dasharray='3,2'/%3E%3C/g%3E%3C/svg%3E");
    background-position: -1px -1px;
    background-size: calc(1rem + 1px);
    border-radius: 0.5rem;
    border: 2px dashed hsl(0 0% 100% / 0.75);
    box-shadow: var(--sl-shadow-lg);
    color: var(--starlight-themes-accent);
    display: flex;
    flex-direction: column;
    font-family: var(--font-patrick-hand), cursive;
    font-size: 1.25rem;
    font-synthesis-weight: auto;
    font-weight: 800;
    gap: 0.5rem;
    inset-block-end: 1rem;
    inset-inline-end: 1rem;
    line-height: 1.5;
    max-width: 75vw;
    padding: 1rem 1.5rem;
    position: fixed;
    z-index: 100;
  }

  a {
    color: inherit;
    outline-color: var(--starlight-themes-accent);
    outline-offset: 2px;
  }

  a:is(:hover, :focus) {
    text-decoration: none;
  }

  label .label-text {
    display: none;
  }

  @media (min-width: 30rem) {
    label .label-text {
      display: inline;
    }
  }

  starlight-themes-select {
    --starlight-themes-select-caret-size: 1.25rem;

    display: inline-flex;
    position: relative;
  }

  select {
    --starlight-themes-select-pad: 0.5rem;

    appearance: none;
    background-color: hsl(0 100% 0% / 0.65);
    background-color: hsl(210 100% 20%);
    border-radius: 0.25rem;
    border: 1px dashed hsl(0 100% 100% / 0.75);
    color: inherit;
    font-size: 1.125rem;
    font-weight: 400;
    padding-inline: var(--starlight-themes-select-pad)
      calc(var(--starlight-themes-select-caret-size) + var(--starlight-themes-select-pad));
  }

  @media (min-width: 30rem) {
    select {
      margin-inline-start: 1ch;
    }
  }

  select:is(:hover, :focus) {
    border-color: var(--starlight-themes-accent);
    background-color: hsl(210 100% 25%);
  }

  select:focus {
    outline: 2px solid var(--starlight-themes-accent);
    outline-offset: 2px;
  }

  .caret {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    pointer-events: none;
    font-size: var(--starlight-themes-select-caret-size);
    inset-inline-end: 0.25rem;
  }

  .documentation {
    align-items: center;
    display: flex;
  }

  @media (prefers-reduced-motion: no-preference) {
    .documentation:is(:hover, :focus) svg {
      animation: right-arrow-move 800ms infinite ease-in-out;
    }
  }

  @keyframes right-arrow-move {
    0%,
    100% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(0.25rem);
    }
  }
</style>
